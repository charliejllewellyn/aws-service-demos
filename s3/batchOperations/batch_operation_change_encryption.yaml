AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates a Lambda function to be used with S3 batch operations to change encryption to use S3 KMS"

Parameters:
  BucketName:
    Description: 'The bucket name holding the objects you wish to change the encryption type on. Note: The bucket name must not end in /.'
    Type: String
    ConstraintDescription: Malformed input-Parameter BucketName must match pattern .*[^\/]$
    AllowedPattern: .*[^\/]$
  InventoryBucketName:
    Description: The bucket name holding the inventory specifying the object you wish to include. This can also include the prefix, e.g. example-bucket/manifests/folder1. The bucket name must not end in /.
    Type: String
    ConstraintDescription: Malformed input-Parameter BucketName must match pattern .*[^\/]$
    AllowedPattern: .*[^\/]$
  S3BatchOperationsReportBucket:
    Description: 'The bucket name you wish to use to store the reports generated by S3 batch operations. This can also include the prefix, e.g. example-bucket/reports/folder1. The bucket name must not end in /.'
    Type: String
    ConstraintDescription: Malformed input-Parameter BucketName must match pattern .*[^\/]$
    AllowedPattern: .*[^\/]$
  KMSKeyId:
    Description: The KMS key ID you wish to change the objects to use
    Type: String

Resources:
  S3BatchOperationsLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os
          import urllib
          
          KmsKey = os.environ['KMS_KEY']
          
          client = boto3.client('s3')
          
          def ChangeEncryption(Bucket, Key, KmsKey):
              print("Starting encryption of s3://" + Bucket + "/" + Key + " with KMS key " + KmsKey)
              response = client.copy_object(CopySource={'Bucket': Bucket, 'Key': Key}, Key=Key, Bucket=Bucket, ServerSideEncryption='aws:kms', SSEKMSKeyId=KmsKey)
              return response
              
          def UrlDecodeKeyName(s3Key):
              return urllib.parse.unquote_plus(s3Key)
          
          def lambda_handler(event, context):
              Key = UrlDecodeKeyName(event['tasks'][0]['s3Key'])
              Bucket = event['tasks'][0]['s3BucketArn'].split(':::')[1]
              print(ChangeEncryption(Bucket, Key, KmsKey))
              print('Encrypted: '  + event['tasks'][0]['s3Key'])
              return
      Description: Used by S3 batch operations to update S3 objects to use KMS
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 100
      MemorySize: 256
      Handler: index.lambda_handler
      Environment:
        Variables:
          KMS_KEY: !Ref KMSKeyId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${BucketName}'

  S3BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batchoperations.s3.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Join ['', [ !GetAtt S3BatchOperationsLambda.Arn, ':$LATEST' ] ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketLocation
                Resource: 
                  - !Sub 'arn:aws:s3:::${InventoryBucketName}/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BatchOperationsReportBucket}/*'

Outputs:
  LambdaExecutionRoleName:
    Value: !Ref LambdaExecutionRole
  S3BatchExecutionRole:
    Value: !Ref S3BatchExecutionRole
